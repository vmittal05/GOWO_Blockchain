#!/usr/bin/env node

const cbor = require('borc')
const args = require('args')
const debug = require('debug')
const log = debug('primea')
const DfinityTx = require('dfinity-tx')
const decoder = DfinityTx.getDecoder()

args
  .option('proto', 'the protocol to connect with', 'tcp')
  .option('ip', 'the ip to connect to', '127.0.0.1')
  .option('port', 'the port on to connect to', 3000)
  .option('db', 'the path to primea database', './testdb')
  .option('debug', 'print debugging info', true)

const flags = args.parse(process.argv)

if (flags.debug) {
  debug.enable('*')
}

const zmq = require('zeromq')
const PrimeaServer = require('./server')
const server = new PrimeaServer({dbPath: flags.db})

var global_txn_id = 0
var state_root = 0

async function get_root() {
  state_root = await server.getStateRoot()
  log("send root")
  sock.send(["root", state_root])
}

function txn_start(root) {
  if (!state_root) {
    server.getStateRoot().then((root) => {state_root = root; txn_start(root)})
  }
  else if (0 != Buffer.compare(state_root,root)) {
    log("state root doesn't match current one, reset hypervisor's state root")
    server.setStateRoot(root).then(()=>{state_root = root; txn_start(root)})
  }
  else {
    log("txn_start", global_txn_id)
    txn_queue = []
    txn_index = 0
    sock.send(["txn_start", cbor.encode(global_txn_id)])
  }
}

async function txn_end() {
  state_root = await server.getStateRoot()
  log("txn_end", global_txn_id)
  sock.send(["txn_end", cbor.encode([global_txn_id, state_root])])
  global_txn_id += 1
}

const address = `${flags.proto}://${flags.ip}:${flags.port}`

const sock = zmq.socket('pair')
sock.connect(address)
console.error("connect to: ", address)

sock.on('message', (topic, message) => {
  log("receive ", topic.toString())
  if (topic == 'txn_start') {
    txn_start(decoder.decodeFirst(message))
  }
  else if (topic == 'txn_run') {
    server.ingress(decoder.decodeFirst(message))
  }
  else if (topic == 'txn_end') {
    txn_end()
  }
  else if (topic == 'get_root') {
    get_root()
  }
})
