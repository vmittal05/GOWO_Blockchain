module Network.DFINITY.Message (Message(..), messageId, ChainEvent(..), toMessage, getHeight) where

import Codec.Serialise            (Serialise, serialise, encode, decode)
import Control.DeepSeq            (NFData)
import Data.Aeson                 (FromJSON, ToJSON)
import Data.ByteString            (ByteString)
import Data.ByteString.Lazy.Char8 (toStrict)
import Data.Monoid                ((<>))
import Data.Word                  (Word64, Word8)
import GHC.Generics               (Generic)
import System.Logger              (ToBytes, bytes)

import Network.DFINITY.Artifact
import Network.DFINITY.Bootstrap
import Network.DFINITY.Orphan ()
import Network.DFINITY.Transaction
import Network.DFINITY.Consensus hiding (verify)

newtype Message = Message { msgBytes :: ByteString } deriving (Generic, Show, NFData)

instance FromJSON Message
instance ToJSON Message
instance Serialise Message where
  encode Message{..} = encode msgBytes
  decode = Message <$> decode

data ChainEvent
  = NewGenesis (SignedBlock GenesisKeys)
  | NewSignedBeacon SignedBeacon
  | NewMinedBlock (MinedBlock Transactions)
  | NewSignedBlock (SignedBlock Transactions)
  | NewNotarizedBlock (NotarizedBlock Transactions)
  | NewRoundStart (RoundStart Transactions)
  | UserTransaction SignedTransaction
  | GenesisRequest ()
  | DataRequest Hash256
  | DataResponse (Hash256, ByteString)
  | Timeout Word64

-- | messageId is used as a header in message serialization.
messageId :: ChainEvent -> Word8
messageId (NewGenesis _) = 1
messageId (NewSignedBeacon _) = 2
messageId (NewMinedBlock _) = 3
messageId (NewSignedBlock _) = 4
messageId (NewNotarizedBlock _) = 5
messageId (NewRoundStart _) = 6
messageId (UserTransaction _) = 7
messageId (GenesisRequest _) = 8
messageId (DataRequest _) = 9
messageId (DataResponse _) = 10
messageId (Timeout _) = 11

instance Eq ChainEvent where
  NewGenesis x == NewGenesis y = x == y
  NewSignedBeacon x == NewSignedBeacon y = x == y
  NewMinedBlock x == NewMinedBlock y = x == y
  NewSignedBlock x == NewSignedBlock y = x == y
  NewNotarizedBlock x == NewNotarizedBlock y = x == y
  NewRoundStart (x, u) == NewRoundStart (y, v) = u == v && roundHeight x == roundHeight y && roundBeacon x == roundBeacon y
  Timeout x == Timeout y = x == y
  UserTransaction x == UserTransaction y = x == y
  _ == _ = False

instance ToBytes ChainEvent where
  bytes (NewMinedBlock x) = bytes x
  bytes (NewSignedBlock x) = bytes x
  bytes (NewNotarizedBlock x) = bytes x
  bytes (NewSignedBeacon x) = bytes x
  bytes (NewRoundStart (rinfo, pblk))
    = "RoundStart " <> bytes (roundHeight rinfo) <> " with parent " <> bytes (unhashed pblk)
  bytes (Timeout x) = "Timeout " <> bytes x
  bytes (DataRequest x) = "DataRequest " <> bytes x
  bytes (DataResponse (x, y)) = "DataRequest (" <> bytes x <> ", " <> bytes y <> ")"
  bytes (GenesisRequest _) = "GenesisRequest"
  bytes (NewGenesis _) = "NewGenesis"
  bytes (UserTransaction x) = "UserTransaction " <> bytes x

getHeight :: Height -> ChainEvent -> Height
getHeight _ (NewMinedBlock x) = height $ unhashed $ content x
getHeight _ (NewSignedBlock x) = height $ unhashed $ content $ fst $ unhashed $ content x
getHeight _ (NewNotarizedBlock x) = height $ unhashed $ content $ fst $ unhashed $ content x
getHeight _ (NewSignedBeacon x) = snd $ unhashed $ content x
getHeight h _ = h

instance BlockArtifact ChainEvent Transactions where
  onMinedBlock (NewMinedBlock x) = Just x
  onMinedBlock _                 = Nothing
  onSignedBlock (NewSignedBlock x) = Just x
  onSignedBlock _                  = Nothing
  onNotarizedBlock (NewNotarizedBlock x) = Just x
  onNotarizedBlock _                  = Nothing
  onRoundStart (NewRoundStart x) = Just x
  onRoundStart _                 = Nothing
  minedBlock = NewMinedBlock
  signedBlock = NewSignedBlock
  notarizedBlock = NewNotarizedBlock
  roundStart = NewRoundStart

instance TransactionArtifact ChainEvent Transactions where
  onTransaction (UserTransaction x) = Just $ unitTransaction $ hashed256 x
  onTransaction _                   = Nothing

instance BeaconArtifact ChainEvent where
  onBeacon (NewSignedBeacon x) = Just x
  onBeacon _                   = Nothing
  signedBeacon = NewSignedBeacon

toMessage :: ChainEvent -> Message
toMessage x = case x of
    NewGenesis        y -> toMessage' n y
    NewSignedBeacon   y -> toMessage' n y
    NewMinedBlock     y -> toMessage' n y
    NewSignedBlock    y -> toMessage' n y
    NewNotarizedBlock y -> toMessage' n y
    UserTransaction   y -> toMessage' n y
    GenesisRequest    y -> toMessage' n y
    DataRequest       y -> toMessage' n y
    DataResponse      y -> toMessage' n y
    Timeout           y -> toMessage' n y
    _ -> error "ChainEvent not meant to send as Message!"
  where
    n = messageId x
    toMessage' n = Message . toStrict . serialise . SomeArtifact . (n,) . toStrict . serialise . toArtifact
