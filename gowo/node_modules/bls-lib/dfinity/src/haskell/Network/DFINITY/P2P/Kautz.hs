module Network.DFINITY.P2P.Kautz
   ( toKautz
   , fromKautz
   , kautzIn
   , kautzOut
   , kautzInRoomy
   , kautzOutRoomy
   , kautzRecommend
   , kautzSize
   ) where 

import Data.List (nub)
import Data.Map.Strict (Map, fromList, lookupGE)
import Data.Maybe (fromJust)

-- |
-- Returns the size of a Kautz graph with given M and N i.e. (M + 1)*M^N.
kautzSize :: Int -> Int -> Int
kautzSize m n = (m+1)*m^n

-- |
-- Returns node label given M, N, and node index. Nodes are 0-indexed.
toKautz :: Int -> Int -> Int -> [Int]
toKautz m n i = f [] n i where
   f [] r k = f [k `mod` (m + 1)] (r - 1) (k `div` (m + 1))
   f acc@(h:_) 0 k = (if k >= h then k + 1 else k):acc
   f acc@(h:_) r k = f (x:acc) (r - 1) (k `div` m) where
      y = k `mod` m
      x = if y >= h then y + 1 else y

-- |
-- Returns node index given M and node label. The length of the label determines
-- N implicitly.
fromKautz :: Int -> [Int] -> Int
fromKautz m as = f 0 as where
   f i (x:y:rest) = f (i * m + (if x > y then x - 1 else x)) (y:rest)
   f i [y] = i * (m + 1) + y
   f _ _   = undefined

-- |
-- Returns node indices of the direct successors given M, N, and a node index.
kautzOut :: Int -> Int -> Int -> [Int]
kautzOut m n i = fromKautz m . (t ++) . pure <$> filter (/= last t) [0..m]
   where t = tail $ toKautz m n i

-- |
-- Returns node indices of the direct predecessors given M, N, and a node index.
kautzIn :: Int -> Int -> Int -> [Int]
kautzIn m n i = fromKautz m . (:s) <$> filter (/= head s) [0..m]
   where s = init $ toKautz m n i

kautzParams :: Map Int (Int, Int)
kautzParams = fromList
   [ (00020, (04, 1))
   , (00030, (05, 1))
   , (00042, (06, 1))
   , (00080, (04, 2))
   , (00108, (03, 3))
   , (00150, (05, 2))
   , (00252, (06, 2))
   , (00320, (04, 3))
   , (00392, (07, 2))
   , (00750, (05, 3))
   , (00972, (03, 5))
-- , (01100, (10, 2))
   , (01280, (04, 4))
   , (01512, (06, 3))
   , (02744, (07, 3))
   , (04608, (08, 3))
   , (07290, (09, 3))
   , (11000, (10, 3))
   ]

-- |
-- Recommend Kautz M and N parameters for a given number of nodes. Since only
-- numbers of a certain form are available, the Kautz graph contains up to twice
-- the number of nodes.
kautzRecommend :: Int -> (Int, Int)
kautzRecommend sz = snd $ fromJust $ lookupGE sz kautzParams

-- |
-- Returns node indices of the direct successors given M, N, a node index, and
-- the number of nodes. The number of nodes may be smaller than the number of
-- nodes in the Kautz graph, so some may have to act as other nodes.
kautzOutRoomy :: Int -> Int -> Int -> Int -> [Int]
kautzOutRoomy m n i lim = filter (/= i) $ nub $ (`mod` lim) <$>
   concatMap (kautzOut m n) [i, i + lim..sz] where sz = kautzSize m n

-- | 
-- Returns node indices of the direct predecessors given M, N, a node index, and
-- the number of nodes. The number of nodes may be smaller than the number of
-- nodes in the Kautz graph, so some may have to act as other nodes.
kautzInRoomy :: Int -> Int -> Int -> Int -> [Int]
kautzInRoomy m n i lim = filter (/= i) $ nub $ (`mod` lim) <$>
   concatMap (kautzIn m n) [i, i + lim..sz] where sz = kautzSize m n
