module Network.DFINITY.P2P.Utilities
   ( (<$$>)
   , convert
   ) where

import Network.Socket (AddrInfo(..), SockAddr, SocketType(..), defaultHints, getAddrInfo)

import Network.DFINITY.P2P.Types (NodeAddr(..))

-- |
-- Promote a function to a nested functor.
(<$$>) :: Functor f => Functor g => (a -> b) -> g (f a) -> g (f b)
(<$$>) f = fmap $ fmap f

-- |
-- Convert a node address to a socket address.
convert :: NodeAddr -> IO SockAddr
convert NodeAddr {..} = do
   AddrInfo {..}:_ <- getAddrInfo hint host port
   pure addrAddress
   where
   hint = pure defaultHints {addrSocketType = Stream}
   host = pure _nodeHost
   port = pure $ show _nodePort
