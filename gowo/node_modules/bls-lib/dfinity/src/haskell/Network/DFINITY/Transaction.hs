{-# LANGUAGE DeriveAnyClass #-}
module Network.DFINITY.Transaction where

import Codec.Serialise (Serialise(..))
import Codec.Serialise.Encoding (encodeTag, encodeListLen)
import Codec.Serialise.Decoding (decodeTag, decodeListLenOf)
import Control.Monad (join)
import Data.Aeson (FromJSON(..), ToJSON(..))
import Data.ByteString.Char8 (ByteString)
import Data.Word (Word8, Word64)
import Data.List (intercalate)
import Data.Text (Text)
import Data.Monoid ((<>), mconcat)
import GHC.Generics (Generic)
import System.Logger (ToBytes, bytes)

import qualified Data.ByteString.Base64 as Base64

import Network.DFINITY.Orphan ()
import Network.DFINITY.Consensus

data Transaction 
  = Transaction 
  { version :: Word8
  , actorId :: ByteString
  , funcName :: Text
  , args :: ByteString
  , ticks :: Word64
  , ticksPrice :: Word64
  , nonce :: Word64
  }
  deriving (Generic, Eq, Show, FromJSON, ToJSON)

type SignedTransaction = Signed Transaction 'Secp256k1

newtype Transactions = Transactions ([Hashed256 SignedTransaction] -> [Hashed256 SignedTransaction])

fromTransactions :: Transactions -> [Hashed256 SignedTransaction]
fromTransactions (Transactions f) = f []

toTransactions :: [Hashed256 SignedTransaction] -> Transactions
toTransactions l = Transactions (l++)

unitTransaction :: Hashed256 SignedTransaction -> Transactions
unitTransaction x = Transactions (x:)

instance Eq Transactions where
  x == y = fromTransactions x == fromTransactions y

instance Monoid Transactions where
  mempty = Transactions id
  mappend (Transactions x) (Transactions y) = Transactions (x . y)

instance Serialise Transaction where
  encode Transaction{..} 
    = encodeTag 44 <> encodeListLen 7 <> encode version <> encode actorId <>
      encode funcName <> encode args <> encode ticks <> encode ticksPrice <> 
      encode nonce
  decode 
    = join $ aux <$> decodeTag <*> decodeListLenOf 7 <*> decode <*> decode <*> 
      decode <*> decode <*> decode <*> decode <*> decode
    where
      aux tag () a b c d e f g | tag == 44 = return $ Transaction a b c d e f g
                               | otherwise = fail "Expect tag 44 for Transaction" 

instance Serialise Transactions where
  encode = encode . fromTransactions
  decode = toTransactions <$> decode

instance ToBytes Transaction where
  bytes Transaction{..} 
    = "Transaction " <>
      "{ version = " <> bytes version <>
      ", actorId = " <> bytes (Base64.encode actorId) <>
      ", funcName = " <> bytes funcName <>
      ", args = " <> bytes (Base64.encode args) <>
      ", ticks = " <> bytes ticks <>
      ", ticksPrice = " <> bytes ticksPrice <>
      ", nonce = " <> bytes nonce <> "}"
    

instance ToBytes Transactions where
  bytes = bytesList . fromTransactions
    where
      bytesList s = "[" <> mconcat (intercalate ([", "]) $ map ((:[]) . bytes) s) <> "]"
