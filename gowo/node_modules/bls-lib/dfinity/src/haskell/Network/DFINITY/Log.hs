module Network.DFINITY.Log (Level(..), writeLogString, writeLog) where

import Control.Monad.Base            (MonadBase(..))
import Control.Monad.Reader          (MonadReader(..))
import Prelude hiding                (log)
import System.Logger                 (Level(..), log)
import System.Logger.Message         (Msg, msg)

import Network.DFINITY.Config
import Network.DFINITY.Orphan ()

writeLogString
  :: MonadBase IO m
  => MonadReader Config m
  => Level
  -> String
  -> m ()
writeLogString level message = do
  Config {..} <- ask
  liftBase $ log cfgLogger level (msg message)

writeLog
  :: MonadBase IO m
  => MonadReader Config m
  => Level
  -> (Msg -> Msg)
  -> m ()
writeLog level message = do
  Config {..} <- ask
  liftBase $ log cfgLogger level message
