-- | The purpose of Artifact is to flatten nested message for purpose of network transport,
-- which is somewhat different than the default serialization scheme (which is meant for storage).
-- For example, both @Hashed256@ and @Signed@ will have its content serialized, but
-- @Block@ will only serialise the hash of its /parent/ field but not the content.
module Network.DFINITY.Artifact where

import Codec.Serialise
import Codec.Serialise.Encoding
import Codec.Serialise.Decoding
import Data.ByteString.Char8      (ByteString)
import Data.Monoid                ((<>))
import Data.Word                  (Word8, Word64)
import GHC.Generics               (Generic)

import Network.DFINITY.Bootstrap
import Network.DFINITY.Consensus
import Network.DFINITY.Transaction

class Artifacts a where
  data family Artifact a
  toArtifact :: a -> Artifact a
  fromArtifact :: Artifact a -> a

newtype SomeArtifact = SomeArtifact (Word8, ByteString) deriving Generic

instance Serialise SomeArtifact

data Chirp = Chirp Int

instance Artifacts Chirp where
  data Artifact Chirp = ArtifactChirp Int
  toArtifact (Chirp i) = ArtifactChirp i
  fromArtifact (ArtifactChirp i) = Chirp i

instance Artifacts () where
  data Artifact () = ArtifactUnit ()
  toArtifact () = ArtifactUnit ()
  fromArtifact (ArtifactUnit ()) = ()

instance Artifacts ByteString where
  data Artifact ByteString = ArtifactByteString ByteString
  toArtifact x = ArtifactByteString x
  fromArtifact (ArtifactByteString x) = x

instance Artifacts Transaction where
  data Artifact Transaction = ArtifactTransaction Transaction
  toArtifact x = ArtifactTransaction x
  fromArtifact (ArtifactTransaction x) = x

instance Artifacts Transactions where
  data Artifact Transactions = ArtifactTransactions [Hashed256 SignedTransaction]
  toArtifact x = ArtifactTransactions $ fromTransactions x
  fromArtifact (ArtifactTransactions x) = toTransactions x

instance Artifacts Word64 where
  data Artifact Word64 = ArtifactWord64 Word64
  toArtifact n = ArtifactWord64 n
  fromArtifact (ArtifactWord64 n) = n

instance Artifacts (KeyFrame a) where
  data Artifact (KeyFrame a) = ArtifactKeyFrame (KeyFrame a)
  toArtifact k = ArtifactKeyFrame k
  fromArtifact (ArtifactKeyFrame k) = k

instance Artifacts Hash256 where
  data Artifact Hash256 = ArtifactHash256 ByteString
  toArtifact Hash256{..} = ArtifactHash256 hashBytes
  fromArtifact (ArtifactHash256 x) = Hash256 x

instance (Artifacts a, Artifacts b) => Artifacts (a, b) where
  data Artifact (a, b) = ArtifactPair (Artifact a) (Artifact b)
  toArtifact (a, b) = ArtifactPair (toArtifact a) (toArtifact b)
  fromArtifact (ArtifactPair a b) = (fromArtifact a, fromArtifact b)

instance Serialise (Artifact Chirp) where
  encode (ArtifactChirp i) = encode i
  decode = ArtifactChirp <$> decode

instance Serialise (Artifact ()) where
  encode (ArtifactUnit x) = encode x
  decode = ArtifactUnit <$> decode

instance Serialise (Artifact ByteString) where
  encode (ArtifactByteString x) = encode x
  decode = ArtifactByteString <$> decode

instance Serialise (Artifact Transaction) where
  encode (ArtifactTransaction x) = encode x
  decode = ArtifactTransaction <$> decode

instance Serialise (Artifact Transactions) where
  encode (ArtifactTransactions x) = encode x
  decode = ArtifactTransactions <$> decode

instance Serialise (Artifact Word64) where
  encode (ArtifactWord64 x) = encode x
  decode = ArtifactWord64 <$> decode

instance Serialise a => Serialise (Artifact (KeyFrame a)) where
  encode (ArtifactKeyFrame x) = encode x
  decode = ArtifactKeyFrame <$> decode

instance (Serialise (Artifact x), Serialise (Artifact y)) => Serialise (Artifact (x, y)) where
  encode (ArtifactPair x y) = encodeListLen 2 <> encode x <> encode y
  decode = decodeListLen >> ArtifactPair <$> decode <*> decode

instance Serialise (Artifact Hash256) where
  encode (ArtifactHash256 x) = encode x
  decode = ArtifactHash256 <$> decode

instance Artifacts a => Artifacts (Hashed256 a) where
  data Artifact (Hashed256 a)
    = ArtifactHashed256 
    { artifactHashed :: Hash256
    , artifactUnhashed :: Artifact a
    } 
  toArtifact Hashed256{..} = 
    ArtifactHashed256 hashed (toArtifact unhashed)
  fromArtifact ArtifactHashed256{..} = 
    Hashed256 artifactHashed (fromArtifact artifactUnhashed)

instance (Serialise a, Artifacts a) => Artifacts (Signed a b) where
  data Artifact (Signed a b) 
    = ArtifactSigned
    { artifactContent :: Artifact a
    , artifactSigner :: Signer b
    , artifactSignature :: Signature b
    }
  toArtifact Signed{..} = 
    ArtifactSigned (toArtifact $ unhashed content) signer signature
  fromArtifact ArtifactSigned{..} = 
    Signed (hashed256 $ fromArtifact artifactContent) artifactSigner artifactSignature

instance Artifacts a => Artifacts (Block a) where
  data Artifact (Block a)
    = ArtifactBlock
    { artifactHeight :: Height
    , artifactBeacon :: Beacon
    , artifactMiner  :: MinerId
    , artifactRank   :: Rank
    , artifactParent :: Hash256
    , artifactPayload :: Artifact a
    }
  toArtifact Block{..} = 
    ArtifactBlock height beacon miner rank (hashed parent) (toArtifact payload)
  fromArtifact ArtifactBlock{..} = 
    Block artifactHeight artifactBeacon artifactMiner artifactRank 
          (Hashed256 artifactParent undefined) (fromArtifact artifactPayload)

instance Artifacts Beacon where
  data Artifact Beacon = ArtifactBeacon Beacon
  toArtifact x = ArtifactBeacon x
  fromArtifact (ArtifactBeacon x) = x

instance Serialise (Artifact a) => Serialise (Artifact (Hashed256 a)) where
  encode ArtifactHashed256{..} = encodeListLen 2 <> encode artifactHashed <> encode artifactUnhashed
  decode = decodeListLen >> (ArtifactHashed256 <$> decode <*> decode)

-- | A @Signed@ value with /Secp256k1/ signature can be serialized.
instance (Serialise (Artifact a), Serialise (Signer s), Serialise (Signature s)) 
      => Serialise (Artifact (Signed a s)) where
  encode ArtifactSigned{..} =
    encodeListLen 3 <> encode artifactContent <> 
    encode artifactSigner <> encode artifactSignature
  decode =
    decodeListLen >> (ArtifactSigned <$> decode <*> decode <*> decode)

instance Serialise (Artifact a) => Serialise (Artifact (Block a)) where
  encode ArtifactBlock{..} = 
    encodeListLen 6 <> encode artifactHeight <> encode artifactBeacon <>
    encode artifactMiner <> encode artifactRank <> 
    encode artifactParent <> encode artifactPayload
  decode =
    decodeListLenOf 6 >> ArtifactBlock <$> decode <*> decode <*> decode <*>
    decode <*> decode <*> decode

instance Serialise (Artifact Beacon) where
  encode (ArtifactBeacon b) = encode b
  decode = ArtifactBeacon <$> decode
