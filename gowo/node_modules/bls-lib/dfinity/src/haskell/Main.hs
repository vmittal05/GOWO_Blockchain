module Main where

import Control.Concurrent.MVar       (newEmptyMVar)
import Control.Concurrent.STM        (atomically)
import Control.Concurrent.STM.TChan  (newTChan)
import Control.Concurrent.STM.TQueue (newTQueueIO)
import Control.Concurrent.STM.TVar   (newTVarIO)
import Control.Exception             (handle, SomeException)
import Control.Monad                 (unless, void)
import Control.Monad.Trans.Resource  (allocate, runResourceT)
import Crypto.BLS                    (initialize)
import Crypto.Secp256k1              (secKey, derivePubKey)
import Data.Default.Class            (Default(..))
import Data.Maybe                    (fromJust)
import Data.Word                     (Word16)
import System.Console.CmdArgs        (Data, cmdArgs)
import System.Directory              (getHomeDirectory, doesFileExist)
import System.FilePath               ((</>))
import qualified System.Logger as Logger

import Network.DFINITY.Bootstrap
import Network.DFINITY.Conduit
import Network.DFINITY.Config
import Network.DFINITY.Consensus
import Network.DFINITY.Database
import Network.DFINITY.Engine
import Network.DFINITY.Monitor
import Network.DFINITY.P2P
import Network.DFINITY.P2P.Crypto
import Network.DFINITY.P2P.Types (NodeAddr(..))
import Network.DFINITY.Process
import Network.DFINITY.Register
import Network.DFINITY.Seed
import Network.DFINITY.UI

import Paths_dfinity (getDataFileName) -- auto-generated by Cabal

data Options =
  Options
  { database         :: String
  , disable_monitor  :: Bool
  , disable_register :: Bool
  , disable_ui       :: Bool
  , monitor_host     :: String
  , monitor_port     :: Word16
  , p2p_ext_ip       :: String
  , p2p_ext_tcp_port :: Word16
  , p2p_ext_udp_port :: Word16
  , p2p_int_ip       :: String
  , p2p_int_tcp_port :: Word16
  , p2p_int_udp_port :: Word16
  , p2p_seed_ip      :: String
  , p2p_seed_port    :: Word16
  , primea_host      :: String
  , primea_port      :: Word16
  , primea_proto     :: String
  , primea_script    :: FilePath
  , primea_db        :: FilePath
  , profile          :: String
  , register_host    :: String
  , register_port    :: Word16
  , register_secure  :: Bool
  , tls_certificate  :: FilePath
  , tls_key          :: FilePath
  , ui_port          :: Word16
  } deriving Data

instance Default Options where
  def =
    Options
    { database         = "db"
    , disable_monitor  = False
    , disable_register = False
    , disable_ui       = False
    , monitor_host     = "127.0.0.1"
    , monitor_port     = 5555
    , p2p_ext_ip       = "127.0.0.1"
    , p2p_ext_tcp_port = 4000
    , p2p_ext_udp_port = 4001
    , p2p_int_ip       = "0.0.0.0"
    , p2p_int_tcp_port = 4000
    , p2p_int_udp_port = 4001
    , p2p_seed_ip      = "127.0.0.1"
    , p2p_seed_port    = 4001
    , primea_host      = "127.0.0.1"
    , primea_port      = 5556
    , primea_proto     = "tcp"
    , primea_script    = "src/javascript/index.js"
    , primea_db        = "primeadb"
    , profile          = "default"
    , register_host    = "127.0.0.1"
    , register_port    = 4002
    , register_secure  = False
    , tls_certificate  = "certificate"
    , tls_key          = "key.pem"
    , ui_port          = 4002
    }

main :: IO ()
main = do
  Options {..} <- cmdArgs def
  primea_script' <- getDataFileName primea_script 
  primea_path <- doesFileExist primea_script' >>= \case
    True -> return primea_script'
    False -> return primea_script
  home <- getHomeDirectory
  let dir = home </> ".dfinity"
  seed <- readSeed dir profile
  initialize
  let secretKey = fromJust $ secKey (hashBytes $ hash256 seed)
      publicKey = derivePubKey secretKey
      nodeId = deriveNodeId secretKey
      certificate = dir </> tls_certificate
      keyFile = dir </> tls_key
  artifactInbound <- atomically $ newTChan
  artifactOutbound <- newTQueueIO
  controller <- newTQueueIO
  logger <- Logger.new Logger.defSettings
  metrics <- newTQueueIO
  ready <- newEmptyMVar
  consensusStarted <- newEmptyMVar
  registry <- newTVarIO (False, [])
  handle (\e -> print (e :: SomeException)) $ do
    runResourceT $ do
      db <- openDB dir database
      let network = bootstrap certificate controller p2p_ext_ip (fromIntegral p2p_ext_tcp_port) (fromIntegral p2p_ext_udp_port) p2p_int_ip (fromIntegral p2p_int_tcp_port) (fromIntegral p2p_int_udp_port) keyFile nodeId [NodeAddr p2p_seed_ip (fromIntegral p2p_seed_port)]
      interface <- snd <$> allocate network p2pShutdown
      let addresses = p2pAddresses interface
      primea <- runProcess primea_path (dir </> primea_db) primea_proto primea_host primea_port
      let config = Config addresses artifactInbound artifactOutbound db interface logger metrics primea publicKey ready registry secretKey consensusStarted
      runConfigT config $ runResourceT $ do
        unless disable_monitor $ runMonitor monitor_host monitor_port
        unless disable_register $ runRegistration controller nodeId register_secure register_host register_port
        unless disable_ui $ runUI ui_port
        void $ runConduit engine
  Logger.close logger
